h2. Get Started

First of all, you need clone the codebase from GitHub:

<blockquote>$ git clone git://github.com/gigix/turing_machine.git</blockquote>

In order to build it, you also need install "Leiningen":http://github.com/technomancy/leiningen -- which is pretty easy on my MacBook Pro with MacPorts:

<blockquote>$ sudo port install leiningen</blockquote>

Now you can build the codebase and see if everything works:

<blockquote>$ cd turing_machine/clojure/domain && ./build.sh</blockquote>

You should see <code>turing_machine-1.0.0-SNAPSHOT-standalone.jar</code> being packaged, as well as a "tape" being printed as following:

<blockquote>(0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1)</blockquote>

That's the binary form of rational number 1/3 (0.010101...). You just executed a Turing Machine which calculates 1/3 and prints the result to a tape -- actually we only calculate and display the starting 10 squares of the tape, because it's simply impossible to finish the calculation, because it's infinite.

h2. Calculate An Irrational Number

There's another machine lays in <code>machines/an_irrational_number.machine</code>, which calculates an irrational number with following form:

<blockquote>0.01011011101111011111...</blockquote>

You can run this machine with following instruction -- the algorithm is more complicated, so you have to run more steps to see a reasonable shape:

<blockquote>$ java -jar turing_machine-1.0.0-SNAPSHOT-standalone.jar machines/an_irrational_number.machine 1000</blockquote>

The starting part of the tape looks like following:

<img src='http://gigix.thoughtworkers.org/assets/2011/10/12/irrational_number.png' width='450px' />

And here's the "source code" (formal name should be "m-configurations", in which "m" stands for "machine") of this machine, which I will explain in more detail in next section:

!http://gigix.thoughtworkers.org/assets/2011/10/12/source_of_irrational_number_1.png!

h2. Write Your Own Machine

File <code>machines/an_irrational_number.machine</code> includes all the fundamental elements to create your own Turing Machine. 

* The lines start with semicolons are comments.
* Non-comment non-empty lines are m-configurations, each of them consists of 4 columns (separated by vertical lines), which in turn are:
** Name of current m-configuration.
** The symbol read from current square of the tape -- m-configurations with same name could behave differently while reading different symbols.
** Operations, separated by commas. Valid operations are:
*** P{x}: Write {x} to current square of the tape.
*** E: Erase any symbol in current square.
*** L/R: move the cursor one square left/right.
** Next m-configuration -- what should be done after current m-configuration?

Now, try to write your own machine, and run it!

h2. What's Next?

"Universal Turing Machine":http://en.wikipedia.org/wiki/Universal_turing_machine , of course. (What else otherwise?)

(It requires reading Chapter 7 and 9 of "The Annotated Turing":http://book.douban.com/subject/2330016/ . Although I haven't started yet, I can feel it's not an easy task. Any contribution would be highly appreciated.)

Meanwhile, I started building a web UI running Turing Machines with "Compojure":http://github.com/weavejester/compojure . Take a look at <code>web</code> folder. You can trial it with:

<blockquote>$ lein ring server</blockquote>

It also makes sense to tidy it up and make it more interactive.

I also want to build an iOS application...but that's another story.

You might want to try something more interesting, e.g. to write a general Turing Machine to determine any given Turing Machine would halt or not; to solve the "Entscheidungsproblem":http://en.wikipedia.org/wiki/Entscheidungsproblem ; etc.

Anyway, enjoy :D